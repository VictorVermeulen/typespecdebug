import "@typespec/http";
import "@typespec/rest";
import "@typespec/openapi3";
import "@typespec/versioning";

import "./autogenerated.tsp";
import "./search.tsp";

import "./models/Import.tsp";
import "./models/User.tsp";
import "./models/BankTransaction.tsp";
import "./models/Entry.tsp";
import "./models/Omnisearch.tsp";
import "./models/domainModel.tsp";
import "./models/Administration.tsp";
import "./common/results.tsp";
import "./common/operations.tsp";
import "./common/listParameters.tsp";
import "./filters/BankTransaction.tsp";
import "./filters/Omnisearch.tsp";

using TypeSpec.Http;
using TypeSpec.Versioning;
using TypeSpec.OpenAPI;
using Results;
using Errors;
using Operations;

@service(#{
    title: "Test UI Directory",
})
@server("/api/2", "Test UI API")
@versioned(Versions)
namespace TestUIDirectory;

enum Versions {
    v2,
}

@route("/user/")
namespace Users {
    @tag("Users")
    interface Users {
        // No actual implementation yet, spec created for dummy purposes
        @doc("List all users")
        @operationId("accounting.user.getMultipleForTenant.v1")
        getAll(...ListParameters): Success<Page<Models.User>>;
    }
}

@route("/me/")
namespace Me {
    @tag("Logged in user")
    interface Me {
        // No actual implementation yet, spec created for dummy purposes
        @doc("Get logged in user")
        @operationId("accounting.user.getLoggedInUser.v1")
        get(...ListParameters): Success<Models.LoggedInUser>;
    }
}

@tag("administration (REAL)")
@route("/administration")
interface AdministrationCRUD
    extends Operations.CRUD<
            "actual",
            "administration",
            Models.Administration,
            Read<Models.Administration>,
            {}
        > {}

@route("/administration/{administration_id}")
namespace Administration {
    @route("/import/")
    @tag("Import")
    interface Import {
        // No actual implementation yet, spec created for dummy purposes
        @doc("Uploads the script and data file")
        @operationId("accounting.import.addToBatch.v2")
        @post
        addToBatch(
            @path administration_id: string,
            @path batchId: string,
            @body body: AddToBatchBody,
        ): AddToBatchResponse;

        // No actual implementation yet, spec created for dummy purposes
        @route("/{batchId}/start")
        @doc("Starts an import batch")
        @operationId("accounting.import.startbatch.v2")
        @post
        startBatch(
            @path administration_id: string,
            @path batchId: string,
            @body body: StartBatchBody,
        ): null;
    }

    @route("/import_tasks/")
    @tag("Import")
    interface ImportTasks {
        // No actual implementation yet, spec created for dummy purposes
        @doc("Get import tasks")
        @operationId("accounting.import.getTasks.v2")
        getImportTasks(@path administration_id: string): Success<Page<ImportTask>>;

        // No actual implementation yet, spec created for dummy purposes
        @route("/{taskId}/cancel")
        @doc("Cancel an import task")
        @operationId("accounting.import.cancelTask.v2")
        @post
        cancelImportTask(@path administration_id: string, @path taskId: string): null;
    }

    @route("/banking/transaction")
    @tag("Bank transactions")
    interface Transaction {
        // No actual implementation yet, spec created for dummy purposes
        @doc("Get bank transactions")
        @operationId("bank-robot.banktransaction.selectAll.v2")
        getBankTransactions(
            @path administration_id: string,
            ...Filters.BankTransaction,
            ...ListParameters,
        ): Success<Page<Models.BankTransaction>>;

        // No actual implementation yet, spec created for dummy purposes
        @route("/meta")
        @doc("Get bank transaction meta")
        @operationId("bank-robot.banktransaction.selectMeta.v2")
        getBankTransactionMeta(
            @path administration_id: string,
        ): Success<Models.BankTransactionMeta>;

        // No actual implementation yet, spec created for dummy purposes
        @route("/{id}")
        @doc("Get single bank transaction")
        @operationId("bank-robot.banktransaction.select.v2")
        getBankTransaction(
            @path administration_id: string,
            @path id: string,
        ): Success<Models.BankTransactionWithEntry>;
    }

    @route("/entry")
    @tag("Entries")
    interface Entry {
        // No actual implementation yet, spec created for dummy purposes
        @doc("Get entries")
        @operationId("bookkeeping.entry.selectAll.v2")
        getAll(@path administration_id: string, ...ListParameters): Success<Page<Models.Entry>>;

        // No actual implementation yet, spec created for dummy purposes
        @route("/{entryId}")
        @doc("Get single entry")
        @operationId("bookkeeping.entry.select.v2")
        getOne(@path administration_id: string, @path entryId: string): Success<Models.Entry>;

        // No actual implementation yet, spec created for dummy purposes
        @route("/{entryId}")
        @operationId("bookkeeping.entry.createOrReplace.v2")
        @put
        createOrReplace(
            @path administration_id: string,
            @path entryId: string,
            @body body: CreateOrReplace<Models.Entry>,
        ): {
            @statusCode statusCode: 200;
            @body result: Success<Read<Models.Entry>>;
        } | {
            @statusCode statusCode: 400;
            @body result: BadRequestError;
        } | {
            @statusCode statusCode: 409;
            @body result: ConflictError;
        };

        // No actual implementation yet, spec created for dummy purposes
        @route("/{entryId}")
        @operationId("bookkeeping.entry.delete.v2")
        @delete
        delete(@path administration_id: string, @path entryId: string): {
            @statusCode statusCode: 204;
        };

        // No actual implementation yet, spec created for dummy purposes
        @operationId("bookkeeping.entry.addDocument.v2")
        @route("/{entryId}/document/{documentId}")
        @put
        addDocument(
            @path administration_id: string,
            @path entryId: string,
            @path documentId: string,
            @body body: CreateOrReplace<Models.EntryDocument>,
        ): Success<Models.EntryDocument>;

        // No actual implementation yet, spec created for dummy purposes
        @operationId("bookkeeping.entry.removeDocument.v2")
        @route("/{entryId}/document/{documentId}")
        @delete
        removeDocument(
            @path administration_id: string,
            @path entryId: string,
            @path documentId: string,
        ): {
            @statusCode statusCode: 204;
        };

        // No actual implementation yet, spec created for dummy purposes
        @operationId("bookkeeping.entry.addLine.v2")
        @route("/{entryId}/line/{lineId}")
        @put
        addLine(
            @path administration_id: string,
            @path entryId: string,
            @path lineId: string,
            @body body: CreateOrReplace<Models.EntryLine>,
        ): Success<Models.EntryLine>;

        // No actual implementation yet, spec created for dummy purposes
        @operationId("bookkeeping.entry.removeLine.v2")
        @route("/{entryId}/line/{lineId}")
        @delete
        removeLine(@path administration_id: string, @path entryId: string, @path lineId: string): {
            @statusCode statusCode: 204;
        };

        // No actual implementation yet, spec created for dummy purposes
        @operationId("bookkeeping.entry.addDocumentToLine.v2")
        @route("/{entryId}/line/{lineId}/document/{documentId}")
        @put
        addDocumentToLine(
            @path administration_id: string,
            @path entryId: string,
            @path lineId: string,
            @path documentId: string,
            @body body: CreateOrReplace<Models.EntryDocument>,
        ): Success<Models.EntryDocument>;

        // No actual implementation yet, spec created for dummy purposes
        @operationId("bookkeeping.entry.removeDocumentFromLine.v2")
        @route("/{entryId}/line/{lineId}/document/{documentId}")
        @delete
        removeDocumentFromLine(
            @path administration_id: string,
            @path entryId: string,
            @path lineId: string,
            @path documentId: string,
        ): {
            @statusCode statusCode: 204;
        };
    }
}
